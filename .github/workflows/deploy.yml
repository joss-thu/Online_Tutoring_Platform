name: Deploy to DigitalOcean

on:
  workflow_dispatch:
  push:
    branches:
      - deploy

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_LINK }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.DO_PAT }}

#      - name: Build and push backend Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: ./backend
#          push: true
#          tags: ${{ secrets.REGISTRY_LINK }}/backend:latest
#
#      - name: Build and push frontend Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: ./frontend
#          push: true
#          tags: ${{ secrets.REGISTRY_NAME }}/frontend:latest
#
#      - name: Build and push WebRTC server Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: ./webrtc
#          push: true
#          tags: ${{ secrets.REGISTRY_NAME }}/webrtc-server:latest

#====================================================================
      - name: Build and push backend Docker image

        run: |
          docker buildx build --push -t registry.digitalocean.com/thutorium-registry/backend:latest -t registry.digitalocean.com/thutorium-registry/backend:${{ github.sha }} ./backend

      - name: Build and push frontend Docker image
        run: |
          docker buildx build --push -t registry.digitalocean.com/thutorium-registry/frontend:latest -t registry.digitalocean.com/thutorium-registry/frontend:${{ github.sha }} ./frontend

      - name: Build and push WebRTC server Docker image
        run: |
          docker buildx build --push -t registry.digitalocean.com/thutorium-registry/webrtc:latest -t registry.digitalocean.com/thutorium-registry/webrtc:${{ github.sha }} ./webrtc

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
#====================================================================
      - name: Create .kube directory
        run: mkdir -p /home/runner/.kube

      - name: Install doctl
        run: sudo snap install doctl

      - name: Grant access to doctl:kube-config
        run: sudo snap connect doctl:kube-config

      - name: Change permissions for .kube directory
        run: sudo chown -R $USER /home/runner/.kube

      - name: Authenticate with DigitalOcean
        run: doctl auth init -t ${{ secrets.DO_PAT }}

      - name: Configure kubectl with DigitalOcean
        run: |
          doctl kubernetes cluster kubeconfig save k8s-thutorium
          export KUBECONFIG=$HOME/.kube/config
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_PAT }}

      - name: Wait for Ingress Controller to be ready
        run: |
          echo "Waiting for Ingress Controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=available deployment/nginx-ingress-ingress-nginx-controller --timeout=120s

      - name: Create Kubernetes secret from ENV_FILE
        run: |
          kubectl delete secret env-file-secret --ignore-not-found
          echo "${{ secrets.ENV_FILE }}" > .env
          kubectl create secret generic env-file-secret --from-env-file=.env

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./.github/k8s/ingress.yaml
          kubectl apply -f ./.github/k8s/deployment.yaml
          kubectl apply -f ./.github/k8s/service.yaml

      - name: Verify Kubernetes Deployment
        run: |
          kubectl get pods -A
          kubectl get services -A
          kubectl get ingress -A
